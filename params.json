{"name":"Cronboss","tagline":"A PHP utility to read and write \"crontab\" data for Linux based systems","body":"cronboss\r\n========\r\nA PHP utility to read and write \"crontab\" data for Linux based\r\nsystems.\r\n\r\nUse Case\r\n========\r\nYou are developing a PHP system that needs to either read from the\r\ncurrent crontab or to add jobs to it.\r\n\r\nThis class then will allow you to read and write the \"crontab\" file for any\r\naccount that your script has permissions to do so on your server.\r\n\r\nUsing It...\r\n===========\r\nOnce loaded, use the `crontab()` method to be given a list of Strings\r\nthat contain the file. What you do with this is up to you put remember\r\nto save your modified crontab by calling the method `crontab($foo)`\r\nwhere foo is the modified Array<String> data.\r\n\r\nHere is a short example:\r\n\r\n```php\r\n    $cron = new CronBoss();\r\n    $jobs = $cron->crondata();\r\n\r\n    //... modify $jobs...\r\n\r\n    $jobs[] = '';\r\n    $cron->crontab($jobs)->save();\r\n```\r\n\r\n*NOTES: For me, for now, this is as simple as I need but I have\r\nplanned some extensions. If you might find them useful get in touch,\r\nit might just be enough to make me do them!*\r\n\r\n\r\nFuture Enhancements\r\n===================\r\n\r\n- add() / remove() / find() methods\r\n- implement PHP Array/Iterable etc interfaces for slicker integration\r\n- use proc_open() to reap stderr when things go wrong!\r\n- implement MARKED SECTION so that existing cron is left as-is and any items added from here are maintained at the end of the file within a tagged comment block.\r\n\r\n\r\n\r\n** DISCLAIMER HERE: If it works, I wrote it. If it breaks then it's\r\nnot my fault etc. Usual rules apply about using other peoples code! **\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}